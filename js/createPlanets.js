import * as THREE from 'three';
import planetsData from './planetsData.js';

const textureLoader = new THREE.TextureLoader();

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
function createMaterial(materialType, texture, config = {}) {
    const baseConfig = { map: texture, ...config };

    switch (materialType) {
        case 'MeshBasicMaterial':
            return new THREE.MeshBasicMaterial(baseConfig);
        case 'MeshPhongMaterial':
            return new THREE.MeshPhongMaterial(baseConfig);
        case 'MeshLambertMaterial':
            return new THREE.MeshLambertMaterial(baseConfig);
        case 'MeshStandardMaterial':
            return new THREE.MeshStandardMaterial(baseConfig);
        default:
            return new THREE.MeshPhongMaterial(baseConfig);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã
function createSinglePlanet(planetKey, scene) {
    const planetInfo = planetsData[planetKey];
    if (!planetInfo) {
        console.error(`Planet ${planetKey} not found in data`);
        return null;
    }

    const config = planetInfo['3d'];
    console.log(`Creating ${planetInfo.name}...`);

    const geometry = new THREE.SphereGeometry(config.radius, config.segments, config.segments);

    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ü–≤–µ—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const tempColors = {
        sun: 0xffff00,
        mercury: 0x808080,
        venus: 0xffa500,
        earth: 0x0000ff,
        mars: 0xFF4500,
        jupiter: 0xDAA520,
        saturn: 0xF4A460,
        uranus: 0x87CEEB,
        neptune: 0x000080,
        pluto: 0x8A2BE2,
        moon: 0xcccccc
    };

    let tempMaterial = createMaterial(config.material, null, {
        color: tempColors[planetKey] || 0xffffff
    });
    const planet = new THREE.Mesh(geometry, tempMaterial);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–Ω–µ–π
    planet.castShadow = config.castShadow !== undefined ? config.castShadow : true;
    planet.receiveShadow = config.receiveShadow !== undefined ? config.receiveShadow : true;
    planet.userData = { name: planetKey };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    textureLoader.load(
        config.texture,
        (texture) => {
            console.log(`${planetInfo.name} texture loaded successfully`);
            planet.material = createMaterial(config.material, texture);
        },
        undefined,
        (error) => {
            console.error(`Error loading ${planetInfo.name} texture:`, error);
        }
    );

    let planetObject = planet;

    // –ï—Å–ª–∏ –ø–ª–∞–Ω–µ—Ç–∞ —Å–ª–æ–∂–Ω–∞—è (–ó–µ–º–ª—è —Å –æ–±–ª–∞–∫–∞–º–∏)
    if (config.isGroup && config.layers) {
        const group = new THREE.Group();
        group.add(planet);
        group.userData = { name: planetKey };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏
        config.layers.forEach(layer => {
            let layerMaterial;

            if (layer.type === 'clouds') {
                layerMaterial = new THREE.MeshStandardMaterial({
                    transparent: true,
                    opacity: layer.opacity || 1
                });
            } else if (layer.type === 'nightLights') {
                layerMaterial = new THREE.MeshBasicMaterial({
                    blending: THREE.AdditiveBlending
                });
            }

            const layerMesh = new THREE.Mesh(geometry, layerMaterial);
            if (layer.scale) layerMesh.scale.setScalar(layer.scale);
            if (layer.renderOrder !== undefined) layerMesh.renderOrder = layer.renderOrder;
            layerMesh.castShadow = true;
            layerMesh.receiveShadow = true;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å–ª–æ—è
            textureLoader.load(layer.texture, (texture) => {
                if (layer.type === 'clouds') {
                    layerMesh.material = new THREE.MeshStandardMaterial({
                        map: texture,
                        transparent: true,
                        opacity: layer.opacity || 1,
                        alphaMap: layer.alphaMap ? texture : undefined
                    });
                } else if (layer.type === 'nightLights') {
                    layerMesh.material = new THREE.MeshBasicMaterial({
                        map: texture,
                        blending: THREE.AdditiveBlending
                    });
                }
            });

            group.add(layerMesh);
        });

        // –ü–æ–≤–æ—Ä–æ—Ç –≥—Ä—É–ø–ø—ã
        if (config.rotation) {
            group.rotation.set(...config.rotation);
        }

        planetObject = group;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª—å—Ü–∞ –µ—Å–ª–∏ –µ—Å—Ç—å (–°–∞—Ç—É—Ä–Ω, –£—Ä–∞–Ω)
    if (config.hasRings && config.rings) {
        const ringsGeometry = new THREE.RingGeometry(
            config.rings.innerRadius,
            config.rings.outerRadius,
            64
        );

        let ringsMaterial = new THREE.MeshPhongMaterial({
            color: 0xD3D3D3,
            side: THREE.DoubleSide,
            transparent: true,
            opacity: config.rings.opacity || 0.8
        });

        const rings = new THREE.Mesh(ringsGeometry, ringsMaterial);
        rings.rotation.x = Math.PI / 2;
        rings.castShadow = true;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∫–æ–ª–µ—Ü
        textureLoader.load(config.rings.texture, (texture) => {
            rings.material = new THREE.MeshPhongMaterial({
                map: texture,
                side: THREE.DoubleSide,
                transparent: true,
                opacity: config.rings.opacity || 0.8
            });
        });

        planet.add(rings);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –°–æ–ª–Ω—Ü–∞
    if (config.hasLight) {
        const light = new THREE.PointLight(0xffffff, config.lightIntensity || 4000);
        light.position.set(0, 0, 0);
        scene.add(light);

        const ambientLight = new THREE.AmbientLight(0x404040, 0.1);
        scene.add(ambientLight);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (config.position) {
        planetObject.position.set(...config.position);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ (–∏ —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞)
    if (config.rotation && !config.isGroup) {
        planetObject.rotation.set(...config.rotation);
    }

    scene.add(planetObject);

    return {
        mesh: planetObject,
        orbitRadius: config.orbitRadius || 0,
        orbitSpeed: config.orbitSpeed || 0,
        rotationSpeed: config.rotationSpeed || 0,
        data: planetInfo // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
    };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç
export function createAllPlanets(scene) {
    console.log('üåç Creating all planets from JSON data...');

    const planets = {};

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const planetOrder = ['sun', 'mercury', 'venus', 'earth', 'moon', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto'];

    planetOrder.forEach(planetKey => {
        if (planetsData[planetKey]) {
            const planet = createSinglePlanet(planetKey, scene);
            if (planet) {
                planets[planetKey] = planet;
            }
        }
    });

    console.log('‚úÖ All planets created from JSON!');
    console.log('üìä Available planets:', Object.keys(planets));
    return planets;
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
export function createSun(scene) {
    return createSinglePlanet('sun', scene);
}

export function createEarth(scene) {
    return createSinglePlanet('earth', scene);
}

export function createMars(scene) {
    return createSinglePlanet('mars', scene);
}

export function createJupiter(scene) {
    return createSinglePlanet('jupiter', scene);
}

export function createMercury(scene) {
    return createSinglePlanet('mercury', scene);
}

export function createVenus(scene) {
    return createSinglePlanet('venus', scene);
}

export function createNeptune(scene) {
    return createSinglePlanet('neptune', scene);
}

export function createMoon(scene) {
    return createSinglePlanet('moon', scene);
}

export function createPluto(scene) {
    return createSinglePlanet('pluto', scene);
}

export function createSaturn(scene) {
    return createSinglePlanet('saturn', scene);
}

export function createUranus(scene) {
    return createSinglePlanet('uranus', scene);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç—ã
export function getPlanetData(planetKey) {
    return planetsData[planetKey] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
export function getAllPlanetsData() {
    return planetsData;
}
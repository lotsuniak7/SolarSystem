import {initScene} from "./initScene.js";
import {initClickHandler} from "./clickHandler.js";
import { UIManager } from "./uiManager.js";
import { createAllPlanets } from "./createPlanets.js";
import {createOrbits} from "./space/orbits.js";
import {createStars} from "./space/Stars.js";
import {initSound} from "./sound.js";
import {initAnimation} from "./animation.js";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã, –∫–∞–º–µ—Ä—ã, —Ä–µ–Ω–¥–µ—Ä–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
const { scene, camera, renderer, controls } = initScene();

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ UI
window.solarSystemScene = scene;

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥
createStars(scene);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏
let soundControls = null;
try {
    soundControls = initSound();
    if (soundControls && soundControls.setSpaceVolume) {
        soundControls.setSpaceVolume(0.4);
    }
} catch (error) {
    console.log('Sound system not available:', error.message);
    soundControls = {
        toggleSun: () => {},
        cleanup: () => {}
    };
}

// üöÄ –°–û–ó–î–ê–ù–ò–ï –í–°–ï–• –ü–õ–ê–ù–ï–¢ –û–î–ù–û–ô –§–£–ù–ö–¶–ò–ï–ô
const allPlanets = createAllPlanets(scene);

// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
const sun = allPlanets.sun;
const earth = allPlanets.earth;
const moon = allPlanets.moon;
const venus = allPlanets.venus;
const neptune = allPlanets.neptune;
const mercury = allPlanets.mercury;
const jupiter = allPlanets.jupiter;
const mars = allPlanets.mars;
const pluto = allPlanets.pluto;
const saturn = allPlanets.saturn;
const uranus = allPlanets.uranus;

// –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
const celestialObjects = [
    sun.mesh,
    earth.mesh,
    moon.mesh,
    venus.mesh,
    mercury.mesh,
    mars.mesh,
    jupiter.mesh,
    saturn.mesh,
    uranus.mesh,
    neptune.mesh,
    pluto.mesh
];

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–±–∏—Ç
const planets = [earth, venus, neptune, mercury, jupiter, mars, pluto, saturn, uranus];
createOrbits(planets, scene);

// –ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è animationControls
const simpleAnimationControls = {
    setSpeed: () => {},
    toggleOrbits: () => {},
    toggleLabels: () => {}
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI Manager
const uiManager = new UIManager(null, simpleAnimationControls);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π UI Manager
const clickHandler = initClickHandler(celestialObjects, camera, scene, controls, renderer, uiManager);

// –°–≤—è–∑—ã–≤–∞–µ–º UI Manager —Å click handler
uiManager.clickHandler = clickHandler;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
const globalAnimationController = initAnimation(sun, earth, moon, venus, neptune, mercury, jupiter, mars, pluto, saturn, uranus, camera, renderer, soundControls, clickHandler, scene);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ UI
window.globalAnimationController = globalAnimationController;

// –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
setTimeout(() => {
    uiManager.hideLoadingScreen();
}, 2000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('Application error:', event.error);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
window.addEventListener('keydown', (event) => {
    switch(event.code) {
        case 'Space':
            event.preventDefault();
            if (globalAnimationController && globalAnimationController.togglePause) {
                const isPaused = globalAnimationController.togglePause();
                console.log(isPaused ? 'Animation paused' : 'Animation resumed');
            }
            break;
        case 'F11':
            event.preventDefault();
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen().catch(console.error);
            } else {
                document.exitFullscreen().catch(console.error);
            }
            break;
    }
});

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (clickHandler && clickHandler.cleanup) {
        clickHandler.cleanup();
    }
    if (soundControls && soundControls.cleanup) {
        soundControls.cleanup();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
window.solarSystemApp = {
    scene,
    camera,
    renderer,
    controls,
    clickHandler,
    uiManager,
    globalAnimationController,
    celestialObjects,
    allPlanets // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏
};

console.log('üåü Solar System Explorer loaded successfully!');
console.log('üí° Tips:');
console.log('  - Click on planet buttons to view information and focus camera');
console.log('  - Use satellite panel when available for moons');
console.log('  - Press H to toggle UI visibility');
console.log('  - Press Space to pause/resume animation');
console.log('  - Press O to toggle orbits, L to toggle labels');
console.log('  - Use animation speed slider for time control');